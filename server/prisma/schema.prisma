generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// USER MANAGEMENT
// ===========================================

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name    String
  password    String
  avatar      String?
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  gamesAsWhite     Game[] @relation("WhitePlayer")
  gamesAsBlack     Game[] @relation("BlackPlayer")
  gameHistory      GameHistory[]
  ratings          Rating[]
  messages         Message[]
  friendRequests   FriendRequest[] @relation("Requester")
  friendRequestsReceived FriendRequest[] @relation("Receiver")
  friends          Friendship[] @relation("User")
  friendsOf        Friendship[] @relation("Friend")
  notifications    Notification[]

  @@map("users")
}

// ===========================================
// GAME MANAGEMENT
// ===========================================

model Game {
  id              String      @id @default(uuid())
  status          GameStatus  @default(WAITING)
  gameType        GameType    @default(CASUAL)
  timeControl     String      // e.g., "5+0", "10+5", "15+10"
  isRated         Boolean     @default(false)
  isPublic        Boolean     @default(true)
  
  // Game state
  currentFen      String      @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  lastMove        String?
  turn            PieceColor  @default(WHITE)
  
  // Game result
  winner          PieceColor?
  result          GameResult?
  reason          String?     // "checkmate", "resignation", "timeout", "draw"
  
  // Timing
  whiteTimeLeft   Int         // milliseconds
  blackTimeLeft   Int         // milliseconds
  timeIncrement   Int         // milliseconds per move
  
  // Metadata
  startedAt       DateTime?
  endedAt         DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  whitePlayerId   String
  whitePlayer     User        @relation("WhitePlayer", fields: [whitePlayerId], references: [id])
  
  blackPlayerId   String?
  blackPlayer     User?       @relation("BlackPlayer", fields: [blackPlayerId], references: [id])
  
  gameHistory     GameHistory[]
  moves           Move[]
  messages        Message[]

  @@map("games")
}

model Move {
  id          String   @id @default(uuid())
  gameId      String
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  moveNumber  Int
  move        String   // e.g., "e2e4", "Nf3", "O-O"
  fen         String   // FEN after move
  notation    String   // e.g., "1. e4 e5 2. Nf3 Nc6"
  
  // Timing
  timeLeft    Int      // milliseconds left after move
  moveTime    Int      // time taken for this move
  
  // Metadata
  createdAt   DateTime @default(now())

  @@map("moves")
  @@index([gameId, moveNumber])
}

model GameHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  // Game result from user's perspective
  result    GameResult
  ratingChange Int?
  
  createdAt DateTime @default(now())

  @@map("game_history")
  @@unique([userId, gameId])
}

// ===========================================
// RATING SYSTEM
// ===========================================

model Rating {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  rating      Int      @default(1200)
  ratingType  RatingType @default(CLASSIC)
  gamesPlayed Int      @default(0)
  wins        Int      @default(0)
  losses      Int      @default(0)
  draws       Int      @default(0)
  
  // Peak rating
  peakRating  Int?
  peakDate    DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ratings")
  @@unique([userId, ratingType])
}


// ===========================================
// CHAT SYSTEM
// ===========================================

model Message {
  id        String      @id @default(uuid())
  gameId    String?
  game      Game?       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  
  content   String
  type      MessageType @default(CHAT)
  
  createdAt DateTime    @default(now())

  @@map("messages")
  @@index([gameId])
}


// ===========================================
// SOCIAL FEATURES
// ===========================================

model FriendRequest {
  id        String   @id @default(uuid())
  requesterId String
  requester  User    @relation("Requester", fields: [requesterId], references: [id])
  receiverId  String
  receiver   User    @relation("Receiver", fields: [receiverId], references: [id])
  
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("friend_requests")
  @@unique([requesterId, receiverId])
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("User", fields: [userId], references: [id])
  friendId  String
  friend    User     @relation("Friend", fields: [friendId], references: [id])
  
  createdAt DateTime @default(now())

  @@map("friendships")
  @@unique([userId, friendId])
}

// ===========================================
// NOTIFICATION SYSTEM
// ===========================================

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  
  title     String
  content   String
  type      NotificationType
  isRead    Boolean          @default(false)
  
  // Optional data
  gameId    String?
  
  createdAt DateTime         @default(now())

  @@map("notifications")
  @@index([userId, isRead])
}

// ===========================================
// ENUMS
// ===========================================

enum GameStatus {
  WAITING
  ACTIVE
  PAUSED
  FINISHED
  ABANDONED
}

enum GameType {
  CASUAL
  RATED
  CUSTOM
}

enum PieceColor {
  WHITE
  BLACK
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
  ABANDONED
}

enum RatingType {
  CLASSIC
  RAPID
  BLITZ
  BULLET
}


enum MessageType {
  CHAT
  SYSTEM
  MOVE_ANNOUNCEMENT
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum NotificationType {
  GAME_INVITE
  GAME_MOVE
  GAME_END
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  SYSTEM
}